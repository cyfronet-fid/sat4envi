import { OwnerType, GLOBAL_OWNER_TYPE, PERSONAL_OWNER_TYPE } from './../../state/overlay/overlay.model';
import {Component, OnDestroy, OnInit} from '@angular/core';
import {ModalComponent} from '../../../../modal/utils/modal/modal.component';
import {ModalService} from '../../../../modal/state/modal.service';
import {OVERLAY_LIST_MODAL_ID} from './overlay-list-modal.model';
import {OverlayQuery} from '../../state/overlay/overlay.query';
import {Observable, Subject} from 'rxjs';
import {Overlay, OverlayUI} from '../../state/overlay/overlay.model';
import {FormControl, FormGroup, Validators} from '@ng-stack/forms';
import {map, takeUntil} from 'rxjs/operators';
import {OverlayService} from '../../state/overlay/overlay.service';
import {disableEnableForm, validateAllFormFields} from '../../../../utils/miscellaneous/miscellaneous';
import {untilDestroyed} from 'ngx-take-until-destroy';
import { WMS_URL_VALIDATORS, getNotRecognizedParamsBy, removeAutoGeneratedParams } from './wms-url.utils';

export interface OverlayForm {
  url: string;
  label: string;
  layerName: string;
}

@Component({
  selector: 's4e-overlay-list-modal',
  templateUrl: './overlay-list-modal.component.html',
  styleUrls: ['./overlay-list-modal.component.scss']
})
export class OverlayListModalComponent extends ModalComponent implements OnInit, OnDestroy {
  public loading$: Observable<boolean>;
  public overlays$: Observable<(Overlay & OverlayUI)[]>;
  public visibilityFCList: FormControl<boolean>[] = [];
  public showOverlayForm$: Observable<boolean>;
  public addingNewLayer$: Observable<boolean>;
  public hasCustomOverlays$: Observable<boolean>;
  private _overlaysChanged$: Subject<void> = new Subject();
  public newOverlayForm: FormGroup<OverlayForm> = new FormGroup<OverlayForm>({
    label: new FormControl<string>('', [Validators.required]),
    url: new FormControl<string>('', [Validators.required, ...WMS_URL_VALIDATORS])
  });

  constructor(
    modalService: ModalService,
    private _overlayQuery: OverlayQuery,
    private _overlayService: OverlayService
  ) {
    super(modalService, OVERLAY_LIST_MODAL_ID);
  }

  ngOnInit() {
    this.loading$ = this._overlayQuery.selectLoading();
    this.overlays$ = this._overlayQuery.selectAllWithUIState();
    this.hasCustomOverlays$ = this.overlays$
      .pipe(map(overlays => overlays.some(overlay => overlay.ownerType === GLOBAL_OWNER_TYPE)));
    this.showOverlayForm$ = this._overlayQuery.ui.select('showNewOverlayForm');
    this.overlays$.subscribe(overlays => {
      this._overlaysChanged$.next();
      this.visibilityFCList = overlays.map(overlay => {
        const fc = new FormControl<boolean>(overlay.visible);
        fc.valueChanges
          .pipe(takeUntil(this._overlaysChanged$))
          .subscribe(visible => this._overlayService.setVisible(overlay.id, visible));
        return fc;
      });
    });

    this.addingNewLayer$ = this._overlayQuery.ui.select('loadingNew').pipe(untilDestroyed(this));
    this.addingNewLayer$.subscribe(loadingNew => disableEnableForm(loadingNew, this.newOverlayForm));
  }

  ngOnDestroy(): void {
    this._overlayService.resetUI();
  }

  filterWmsUrlErrors(errors: {[errorName: string]: true}) {
    const errorsNames = Object.keys(errors);
    if (errorsNames.some(error => error === 'required')) {
      return { 'required': true };
    }

    if (errorsNames.some(error => error === 'url')) {
      return { 'url': true };
    }

    return errors;
  }

  async removeOverlay(id: string) {
    if (await this.modalService.confirm(
      'Usuń nakładkę',
      'Czy na pewno chcesz usunąć tę nakładkę? Operacja jest nieodwracalna.'
    )) {
      this._overlayService.deleteOverlay(id);
    }
  }

  hasErrors(controlName: string) {
    const formControl = this.newOverlayForm
      .controls[controlName] as FormControl;
    return !!formControl
      && formControl.touched
      && !!formControl.errors
      && Object.keys(formControl.errors).length > 0;
  }

  setNewFormVisible(show: boolean) {
    this.newOverlayForm.reset();
    this._overlayService.setNewFormVisible(show);
  }

  async addNewOverlay$() {
    validateAllFormFields(this.newOverlayForm);

    if (this.newOverlayForm.invalid) {
      return;
    }

    // Handle not recognized params
    const url = this.newOverlayForm.controls.url.value;
    const notRecognizedParams = getNotRecognizedParamsBy(url);
    const modalTitle = 'URL posiada parametry nieuwzględnione w dokumentacji';
    if (
      !!notRecognizedParams
      && notRecognizedParams.trim() !== ''
      && !(await this.modalService.confirm(
        modalTitle,
        `
          Obraz WMS może nie działać poprawnie ze względu na parametry URL: <br>
          <b>${notRecognizedParams}</b><br>
          Usuń je z linku i uaktualnij pole URL albo zatwierdź dodanie w aktualnym stanie
        `
      ))
    ) {
      return;
    }

    this._overlayService.createOverlay({
      ...this.newOverlayForm.value,
      layerName: this.newOverlayForm.controls.label.value,
      url: removeAutoGeneratedParams(url)
    });
  }

  isPersonal(overlay: Overlay) {
    return overlay.ownerType === PERSONAL_OWNER_TYPE;
  }

  getOverlayId(overlay: Overlay): string {
    return overlay.id;
  }
}
